#!/usr/bin/env python
"""Sort the rule parameters in a snakemake file."""

import collections
import re
from pathlib import Path
import sys

import click

# These are listed in order
rule_params = [
    "input",
    "output",
    "params",
    "log",
    "benchmark",
    "cache",
    "message",
    "threads",
    "resources",
    "version",
    "conda",
    "container",
    "run",
    "shell",
    "script",
    "notebook",
]


@click.command(context_settings={"show_default": True})
@click.argument(
    "src",
    nargs=-1,
    type=click.Path(
        exists=True,
        file_okay=True,
        dir_okay=True,
        readable=True,
        allow_dash=True,
        path_type=Path,
    ),
    is_eager=True,
)
@click.version_option(version="0.0.1")
def main(src):
    files_to_sort = get_snakefiles(src)
    for src_file in files_to_sort:
        try:
            original_content = src_file.read_text()
        except AttributeError:
            original_content = src_file.read()
        sorted_code = sort_file(original_content)
        print(sorted_code)
        # Not quite brave enough for this yet
        # src_file.write_text(sorted_code)


def get_snakefiles(src):
    """Get all Snakefiles in src, and if src is a directory then return all
    snakefiles below that directory recursively
    """
    files = []
    for s in src:
        if s.is_file():
            files.append(s)
        elif s.is_dir():
            files.extend(sorted(s.glob("**/*.smk")))
            files.extend(sorted(s.glob("**/Snakefile")))
        elif str(s) == "-":
            files.append(sys.stdin)
        else:
            pass
    return files


def flush_rule(rule, output):
    if rule:
        for param in rule_params:
            if param in rule:
                output.append("\n".join(rule[param]))
        rule = collections.defaultdict(list)
    return rule, output


def sort_file(source):
    outfile = []
    rule = collections.defaultdict(list)
    current_param = ""
    in_rule = False
    """Sort a snakemake source code file"""
    for line in source.splitlines():
        if re.match(r"\s*rule \w+:", line):
            # How do we know we're no longer in a rule?
            in_rule = True
            # Flush existing rule if we have one
            rule, outfile = flush_rule(rule, outfile)
            # Write the rule line to output since we don't save it
            outfile.append(line)
            continue
        elif m := re.match(r"\s*(" + "|".join(rule_params) + "):", line):
            current_param = m.group(1)
        else:
            # This could either be more lines inside a rule/parameter, or we
            # could be outside the rule. Need to figure out how to
            # differentiate between these two situations (indentation?)
            pass

        if in_rule:
            rule[current_param].append(line)
        else:
            outfile.append(line)

    # Flush existing rule when we reach the end of the file
    rule, outfile = flush_rule(rule, outfile)
    return "\n".join(outfile)


if __name__ == "__main__":
    main()
